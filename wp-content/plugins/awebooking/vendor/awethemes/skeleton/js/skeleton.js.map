{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/component-emitter/index.js","skeleton.js","resouces/js/skeleton.js","vendor/deps.js"],"names":[],"mappingsvKA;ADyKA;ACvKA;ADyKA;ACvKA;ADyKA;ACvKA;AACE;ADyKF;ACvKE;ADyKF;ACvKE;ADyKF;AACA;AACA;AACA;AACA;ACvKE;AAA4B;AAAuB;AD2KrD;ACzKE;AD2KF;AACA;ACzKE;AACE;AACA;AD2KJ;ACzKI;AACE;AACD;AD2KL;ACzKI;AD2KJ;AACA;AACA;AACA;AACA;AACA;ACzKI;AACE;AACD;AD2KL;ACzKI;AD2KJ;AACA;AACA;AACA;ACzKI;AACE;AD2KN;ACzKM;AD2KN;ACzKM;AACA;AACD;AD2KL;ACzKI;AACE;AACI;AD2KV;ACzKU;AACE;AACD;AACC;AACD;AD2KX;ACzKU;AACH;AD2KP;ACzKM;AACE;AACA;AD2KR;ACzKQ;AACA;AD2KR;ACzKQ;AACA;AACE;AACD;AD2KT;ACzKQ;AACA;AACA;AD2KR;ACzKQ;AACA;AACA;AD2KR;ACzKQ;AACA;AACE;AACD;AD2KT;ACzKQ;AACA;AACE;AD2KV;ACzKU;AACA;AACD;AACF;AD2KP;ACzKM;AACE;AACA;AD2KR;ACzKQ;AACA;AACE;AD2KV;ACzKU;AACE;AACA;AACD;AACF;AD2KT;ACzKQ;AACA;AACE;AACA;AACD;AACF;AACF;AApGM;ADgRX;ACzKE;AACE;AD2KJ;ACzKI;AACE;AACA;AD2KN;ACzKM;AACA;AACE;AD2KR;ACzKQ;AAAA;AAAA;AD6KR;ACzKQ;AACE;AAAA;AD4KV;ACzKU;AACA;AACD;AACF;AD2KP;ACzKM;AACA;AACE;AACA;AACA;AACE;AACE;AACD;AACF;AACD;AACE;AACE;AChaS;AAZ2B;AAc/B;AACF;AD2KH;ACzKE;AD2KF;AACA;ACzKE;AACE;AACA;AD2KJ;ACzKI;AACA;AACE;AACD;AACF;AAEF;AD0KD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"skeleton.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n","//=require vendor/deps.js\n\nconst Emitter = require('component-emitter');\n\nwindow.Skeleton = window.Skeleton || {};\n\n(function($, S) {\n  'use strict';\n\n  S.emitter = new Emitter;\n\n  /**\n   * Extendable Skeleton.\n   *\n   * @param  {Object} args\n   * @return {void}\n   */\n  S.extend = function(args) { _.extend(this, args); };\n\n  /**\n   * Core methods.\n   */\n  S.extend({\n    services: {},\n    initialized: false,\n\n    bind: function(key, cb) {\n      this.services[key] = cb;\n    },\n\n    /**\n     * Listen on the given `event` with `fn`.\n     *\n     * @param  {String} event\n     * @param  {Function} fn\n     * @return {Emitter}\n     */\n    on: function(event, fn) {\n      return this.emitter.on(event, fn);\n    },\n\n    /**\n     * Init Skelton.\n     *\n     * @return {void}\n     */\n    init: function() {\n      this.emitter.emit('initialize', this);\n\n      this.triggerTabs();\n\n      this.initialized = true;\n      this.emitter.emit('initialized', this);\n    },\n\n    triggerTabs() {\n      var getStorageCurrentActive = function() {\n          var currentActive = sessionStorage.getItem('cmb-current-active');\n\n          try {\n            currentActive = JSON.parse(currentActive);\n          } catch(e) {\n            sessionStorage.removeItem('cmb-current-active');\n          }\n\n          return currentActive || {};\n      };\n\n      var setActiveTab = function($current, $metabox, metaboxID) {\n        // Do nothing if invalid metabox ID.\n        if (! metaboxID) return;\n\n        // Get the target ID.\n        var targetID = $current.data('target');\n\n        var hasPanel = $current.hasClass('.cmb2-panel') || $current.closest('.cmb2-panel').length > 0;\n        if (hasPanel && ! targetID) {\n          targetID = $current.parent().find('.cmb2-sub-tabs .cmb2-tab-link').first().data('target');\n        }\n\n        // Remove prev active from tab-pane and tab-li.\n        $metabox.find('.cmb2-tab-pane').removeClass('active');\n        $metabox.find('.cmb2-tab, .cmb2-panel').removeClass('active');\n\n        // Add active class to current.\n        $(targetID, $metabox).addClass('active');\n        $current.closest('.cmb2-tab').addClass('active');\n\n        // Active panel.\n        if (hasPanel) {\n          $current.closest('.cmb2-panel').addClass('active');\n        }\n\n        // Add current active to sessionStorage\n        if (window.sessionStorage) {\n          var currentActive = getStorageCurrentActive();\n\n          currentActive[metaboxID] = targetID;\n          sessionStorage.setItem('cmb-current-active', JSON.stringify(currentActive));\n        }\n      };\n\n      $('.cmb2-metabox').each(function() {\n        var $metabox = $(this);\n        var metaboxID = $metabox.attr('id').replace('cmb2-metabox-', '');\n\n        // First, active via sessionStorage.\n        if (window.sessionStorage) {\n          var currentActive = getStorageCurrentActive();\n\n          if (typeof currentActive[metaboxID] !== 'undefined') {\n            var activeTarget = currentActive[metaboxID];\n            setActiveTab($('[data-target=\"'+activeTarget+'\"]', $metabox), $metabox, metaboxID);\n          }\n        }\n\n        // Active tab when click on nav-link.\n        $metabox.find('.cmb2-tab-link, .cmb2-panel-link').on('click', function(e) {\n          e.preventDefault();\n          setActiveTab($(this), $metabox, metaboxID);\n        });\n      });\n    }\n  });\n\n  S.deps = function () {\n    var $context = $('.cmb2-wrap > .cmb2-metabox', $(document));\n\n    $context.each(function () {\n      var $this = $(this);\n      var ruleset = $.deps.createRuleset();\n\n      // Build dependencies rule.\n      $this.find('[data-deps]').each(function () {\n        var $el = $(this);\n\n        var controllers = $el.data('deps').split('|'),\n            conditions = $el.data('depsCondition').split('|'),\n            depsValues = $el.data('depsValue').toString().split('|');\n\n        $.each(controllers, function (index, controller) {\n          var depsValue = depsValues[index] || '',\n              condition = conditions[index] || conditions[0];\n\n          var rule = ruleset.createRule('[data-deps-id=\"' + controller + '\"]', condition, depsValue);\n          rule.include($el);\n        });\n      });\n\n      // Enable dependency.\n      $.deps.enable($this, ruleset, {\n        log: false,\n        checkTargets: false,\n        show: function show(el) {\n          el.slideDown(250, function () {\n            el.removeClass('hidden');\n          });\n        },\n        hide: function hide(el) {\n          el.slideUp(250, function () {\n            el.addClass('hidden');\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * Let's start!\n   */\n  $(function() {\n    window.Skeleton.init();\n    window.Skeleton.deps();\n\n    // Trigger reload JS when widget changed.\n    $(document).on('widget-added widget-updated', function( event, $widget ) {\n      window.Skeleton.triggerTabs();\n    });\n  });\n\n})(jQuery, window.Skeleton);\n","//=require vendor/deps.js\n\nconst Emitter = require('component-emitter');\n\nwindow.Skeleton = window.Skeleton || {};\n\n(function($, S) {\n  'use strict';\n\n  S.emitter = new Emitter;\n\n  /**\n   * Extendable Skeleton.\n   *\n   * @param  {Object} args\n   * @return {void}\n   */\n  S.extend = function(args) { _.extend(this, args); };\n\n  /**\n   * Core methods.\n   */\n  S.extend({\n    services: {},\n    initialized: false,\n\n    bind: function(key, cb) {\n      this.services[key] = cb;\n    },\n\n    /**\n     * Listen on the given `event` with `fn`.\n     *\n     * @param  {String} event\n     * @param  {Function} fn\n     * @return {Emitter}\n     */\n    on: function(event, fn) {\n      return this.emitter.on(event, fn);\n    },\n\n    /**\n     * Init Skelton.\n     *\n     * @return {void}\n     */\n    init: function() {\n      this.emitter.emit('initialize', this);\n\n      this.triggerTabs();\n\n      this.initialized = true;\n      this.emitter.emit('initialized', this);\n    },\n\n    triggerTabs() {\n      var getStorageCurrentActive = function() {\n          var currentActive = sessionStorage.getItem('cmb-current-active');\n\n          try {\n            currentActive = JSON.parse(currentActive);\n          } catch(e) {\n            sessionStorage.removeItem('cmb-current-active');\n          }\n\n          return currentActive || {};\n      };\n\n      var setActiveTab = function($current, $metabox, metaboxID) {\n        // Do nothing if invalid metabox ID.\n        if (! metaboxID) return;\n\n        // Get the target ID.\n        var targetID = $current.data('target');\n\n        var hasPanel = $current.hasClass('.cmb2-panel') || $current.closest('.cmb2-panel').length > 0;\n        if (hasPanel && ! targetID) {\n          targetID = $current.parent().find('.cmb2-sub-tabs .cmb2-tab-link').first().data('target');\n        }\n\n        // Remove prev active from tab-pane and tab-li.\n        $metabox.find('.cmb2-tab-pane').removeClass('active');\n        $metabox.find('.cmb2-tab, .cmb2-panel').removeClass('active');\n\n        // Add active class to current.\n        $(targetID, $metabox).addClass('active');\n        $current.closest('.cmb2-tab').addClass('active');\n\n        // Active panel.\n        if (hasPanel) {\n          $current.closest('.cmb2-panel').addClass('active');\n        }\n\n        // Add current active to sessionStorage\n        if (window.sessionStorage) {\n          var currentActive = getStorageCurrentActive();\n\n          currentActive[metaboxID] = targetID;\n          sessionStorage.setItem('cmb-current-active', JSON.stringify(currentActive));\n        }\n      };\n\n      $('.cmb2-metabox').each(function() {\n        var $metabox = $(this);\n        var metaboxID = $metabox.attr('id').replace('cmb2-metabox-', '');\n\n        // First, active via sessionStorage.\n        if (window.sessionStorage) {\n          var currentActive = getStorageCurrentActive();\n\n          if (typeof currentActive[metaboxID] !== 'undefined') {\n            var activeTarget = currentActive[metaboxID];\n            setActiveTab($('[data-target=\"'+activeTarget+'\"]', $metabox), $metabox, metaboxID);\n          }\n        }\n\n        // Active tab when click on nav-link.\n        $metabox.find('.cmb2-tab-link, .cmb2-panel-link').on('click', function(e) {\n          e.preventDefault();\n          setActiveTab($(this), $metabox, metaboxID);\n        });\n      });\n    }\n  });\n\n  S.deps = function () {\n    var $context = $('.cmb2-wrap > .cmb2-metabox', $(document));\n\n    $context.each(function () {\n      var $this = $(this);\n      var ruleset = $.deps.createRuleset();\n\n      // Build dependencies rule.\n      $this.find('[data-deps]').each(function () {\n        var $el = $(this);\n\n        var controllers = $el.data('deps').split('|'),\n            conditions = $el.data('depsCondition').split('|'),\n            depsValues = $el.data('depsValue').toString().split('|');\n\n        $.each(controllers, function (index, controller) {\n          var depsValue = depsValues[index] || '',\n              condition = conditions[index] || conditions[0];\n\n          var rule = ruleset.createRule('[data-deps-id=\"' + controller + '\"]', condition, depsValue);\n          rule.include($el);\n        });\n      });\n\n      // Enable dependency.\n      $.deps.enable($this, ruleset, {\n        log: false,\n        checkTargets: false,\n        show: function show(el) {\n          el.slideDown(250, function () {\n            el.removeClass('hidden');\n          });\n        },\n        hide: function hide(el) {\n          el.slideUp(250, function () {\n            el.addClass('hidden');\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * Let's start!\n   */\n  $(function() {\n    window.Skeleton.init();\n    window.Skeleton.deps();\n\n    // Trigger reload JS when widget changed.\n    $(document).on('widget-added widget-updated', function( event, $widget ) {\n      window.Skeleton.triggerTabs();\n    });\n  });\n\n})(jQuery, window.Skeleton);\n","/**\n * jQuery Interdependencies library\n *\n * http://miohtama.github.com/jquery-interdependencies/\n *\n * Copyright 2012-2013 Mikko Ohtamaa, others\n */\n\n/*global console, window*/\n\n(function($) {\n\n    \"use strict\";\n\n    /**\n     * Microsoft safe helper to spit out our little diagnostics information\n     *\n     * @ignore\n     */\n    function log(msg) {\n        if (window.console && window.console.log) {\n            console.log(msg);\n        }\n    }\n\n\n    /**\n     * jQuery.find() workaround for IE7\n     *\n     * If your selector is an pure tag id (#foo) IE7 finds nothing\n     * if you do jQuery.find() in a specific jQuery context.\n     *\n     * This workaround makes a (false) assumptions\n     * ids are always unique across the page.\n     *\n     * @ignore\n     *\n     * @param  {jQuery} context  jQuery context where we look child elements\n     * @param  {String} selector selector as a string\n     * @return {jQuery}          context.find() result\n     */\n    function safeFind(context, selector) {\n\n        if (selector[0] == \"#\") {\n\n            // Pseudo-check that this is a simple id selector\n            // and not a complex jQuery selector\n            if (selector.indexOf(\" \") < 0) {\n                return $(selector);\n            }\n        }\n\n        return context.find(selector);\n    }\n\n    /**\n     * Sample configuration object which can be passed to {@link jQuery.deps#enable}\n     *\n     * @class Configuration\n     */\n    var configExample = {\n\n        /**\n         * @cfg show Callback function show(elem) for showing elements\n         * @type {Function}\n         */\n        show: null,\n\n        /**\n         * @cfg hide Callback function hide(elem) for hiding elements\n         * @type {Function}\n         */\n        hide: null,\n\n        /**\n         * @cfg log Write console.log() output of rule applying\n         * @type {Boolean}\n         */\n        log: false,\n\n\n        /**\n         * @cfg checkTargets When ruleset is enabled, check that all controllers and controls referred by ruleset exist on the page.\n         *\n         * @default true\n         *\n         * @type {Boolean}\n         */\n        checkTargets: true\n\n    };\n\n    /**\n     * Define one field inter-dependency rule.\n     *\n     * When condition is true then this input and all\n     * its children rules' inputs are visible.\n     *\n     * Possible condition strings:\n     *\n     *  * **==**  Widget value must be equal to given value\n     *\n     *  * **any** Widget value must be any of the values in the given value array\n     *\n     *  * **non-any** Widget value must not be any of the values in the given value array\n     *\n     *  * **!=** Widget value must not be qual to given value\n     *\n     *  * **()** Call value as a function(context, controller, ourWidgetValue) and if it's true then the condition is true\n     *\n     *  * **null** This input does not have any sub-conditions\n     *\n     *\n     *\n     */\n    function Rule(controller, condition, value) {\n        this.init(controller, condition, value);\n    }\n\n    $.extend(Rule.prototype, {\n\n        /**\n         * @method constructor\n         *\n         * @param {String} controller     jQuery expression to match the `<input>`   source\n         *\n         * @param {String} condition What input value must be that {@link Rule the rule takes effective}.\n         *\n         * @param value Matching value of **controller** when widgets become visible\n         *\n         */\n        init: function(controller, condition, value) {\n            this.controller = controller;\n\n            this.condition = condition;\n\n            this.value = value;\n\n            // Child rules\n            this.rules = [];\n\n            // Controls shown/hidden by this rule\n            this.controls = [];\n        },\n\n        /**\n         * Evaluation engine\n         *\n         * @param  {String} condition Any of given conditions in Rule class description\n         * @param  {Object} val1      The base value we compare against\n         * @param  {Object} val2      Something we got out of input\n         * @return {Boolean}          true or false\n         */\n        evalCondition: function(context, control, condition, val1, val2) {\n            /**\n             * NOTE: Edited by Skeleton.\n             *\n             * Added new condition for Skeleton.\n             */\n            if (condition == \"==\") {\n                return this.checkBoolean(val1) == this.checkBoolean(val2);\n            } else if (condition == \"!=\") {\n                return this.checkBoolean(val1) != this.checkBoolean(val2);\n            } else if (condition == \">=\") {\n                return Number(val2) >= Number(val1);\n            } else if (condition == \"<=\") {\n                return Number(val2) <= Number(val1);\n            } else if (condition == \">\") {\n                return Number(val2) > Number(val1);\n            } else if (condition == \"<\") {\n                return Number(val2) < Number(val1);\n            } else if (condition == \"()\") {\n                return window[val1](context, control, val2); // FIXED: function method\n            } else if (condition == \"any\") {\n                return $.inArray(val2, val1.split(',')) > -1;\n            } else if (condition == \"not-any\") {\n                return $.inArray(val2, val1.split(',')) == -1;\n            } else {\n                throw new Error(\"Unknown condition:\" + condition);\n            }\n        },\n\n        /**\n         * NOTE: Added by Skeleton.\n         */\n        checkBoolean: function(value) {\n            switch (value) {\n                case true:\n                case 'true':\n                case 1:\n                case '1':\n                    //case 'on':\n                    //case 'yes':\n                    value = true;\n                    break;\n\n                case false:\n                case 'false':\n                case 0:\n                case '0':\n                    //case 'off':\n                    //case 'no':\n                    value = false;\n                    break;\n            }\n\n            return value;\n        },\n\n        /**\n         * Evaluate the condition of this rule in given jQuery context.\n         *\n         * The widget value is extracted using getControlValue()\n         *\n         * @param {jQuery} context The jQuery selection in which this rule is evaluated.\n         *\n         */\n        checkCondition: function(context, cfg) {\n\n            // We do not have condition set, we are always true\n            if (!this.condition) {\n                return true;\n            }\n\n            var control = context.find(this.controller);\n            if (control.length === 0 && cfg.log) {\n                log(\"Evaling condition: Could not find controller input \" + this.controller);\n            }\n\n            var val = this.getControlValue(context, control);\n            if (cfg.log && val === undefined) {\n                log(\"Evaling condition: Could not exctract value from input \" + this.controller);\n            }\n\n            if (val === undefined) {\n                return false;\n            }\n\n            val = this.normalizeValue(control, this.value, val);\n\n            return this.evalCondition(context, control, this.condition, this.value, val);\n        },\n\n        /**\n         * Make sure that what we read from input field is comparable against Javascript primitives\n         *\n         */\n        normalizeValue: function(control, baseValue, val) {\n\n            if (typeof baseValue == \"number\") {\n                // Make sure we compare numbers against numbers\n                return parseFloat(val);\n            }\n\n            return val;\n        },\n\n        /**\n         * Read value from a diffent HTML controls.\n         *\n         * Handle, text, checkbox, radio, select.\n         *\n         */\n        getControlValue: function(context, control) {\n            /**\n             * NOTE: Edited by Skeleton.\n             *\n             * Added multiple checkbox value control.\n             */\n            if ((control.attr(\"type\") == \"radio\" || control.attr(\"type\") == \"checkbox\") && control.length > 1) {\n                return control.filter(\":checked\").val();\n            }\n\n            // Handle individual checkboxes & radio\n            if (control.attr(\"type\") == \"checkbox\" || control.attr(\"type\") == \"radio\") {\n                return control.is(\":checked\");\n            }\n\n            return control.val();\n        },\n\n        /**\n         * Create a sub-rule.\n         *\n         * Example:\n         *\n         *      var masterSwitch = ruleset.createRule(\"#mechanicalThrombectomyDevice\")\n         *      var twoAttempts = masterSwitch.createRule(\"#numberOfAttempts\", \"==\", 2);\n         *\n         * @return Rule instance\n         */\n        createRule: function(controller, condition, value) {\n            var rule = new Rule(controller, condition, value);\n            this.rules.push(rule);\n            return rule;\n        },\n\n        /**\n         * Include a control in this rule.\n         *\n         * @param  {String} input     jQuery expression to match the input within ruleset context\n         */\n        include: function(input) {\n\n            if (!input) {\n                throw new Error(\"Must give an input selector\");\n            }\n\n            this.controls.push(input);\n        },\n\n        /**\n         * Apply this rule to all controls in the given context\n         *\n         * @param  {jQuery} context  jQuery selection within we operate\n         * @param  {Object} cfg      {@link Configuration} object or undefined\n         * @param  {Object} enforced Recursive rule enforcer: undefined to evaluate condition, true show always, false hide always\n         *\n         */\n        applyRule: function(context, cfg, enforced) {\n\n            var result;\n\n            if (enforced === undefined) {\n                result = this.checkCondition(context, cfg);\n            } else {\n                result = enforced;\n            }\n\n            if (cfg.log) {\n                log(\"Applying rule on \" + this.controller + \"==\" + this.value + \" enforced:\" + enforced + \" result:\" + result);\n            }\n\n            if (cfg.log && !this.controls.length) {\n                log(\"Zero length controls slipped through\");\n            }\n\n            // Get show/hide callback functions\n\n            var show = cfg.show || function(control) {\n                control.show();\n            };\n\n            var hide = cfg.hide || function(control) {\n                control.hide();\n            };\n\n\n            // Resolve controls from ids to jQuery selections\n            // we are controlling in this context\n            var controls = $.map(this.controls, function(elem, idx) {\n                var control = context.find(elem);\n                if (cfg.log && control.length === 0) {\n                    log(\"Could not find element:\" + elem);\n                }\n                return control;\n            });\n\n            if (result) {\n\n                $(controls).each(function() {\n\n\n                    // Some friendly debug info\n                    if (cfg.log && $(this).length === 0) {\n                        log(\"Control selection is empty when showing\");\n                        log(this);\n                    }\n\n                    show(this);\n                });\n\n                // Evaluate all child rules\n                $(this.rules).each(function() {\n                    this.applyRule(context, cfg);\n                });\n\n            } else {\n\n                $(controls).each(function() {\n\n                    // Some friendly debug info\n                    if (cfg.log && $(this).length === 0) {\n                        log(\"Control selection is empty when hiding:\");\n                        log(this);\n                    }\n\n                    hide(this);\n                });\n\n                // Supress all child rules\n                $(this.rules).each(function() {\n                    this.applyRule(context, cfg, false);\n                });\n            }\n        }\n    });\n\n    /**\n     * A class which manages interdependenice rules.\n     */\n    function Ruleset() {\n\n        // Hold a tree of rules\n        this.rules = [];\n    }\n\n    $.extend(Ruleset.prototype, {\n\n        /**\n         * Add a new rule into this ruletset.\n         *\n         * See  {@link Rule} about the contstruction parameters.\n         * @return {Rule}\n         */\n        createRule: function(controller, condition, value) {\n            var rule = new Rule(controller, condition, value);\n            this.rules.push(rule);\n            return rule;\n        },\n\n        /**\n         * Apply these rules on an element.\n         *\n         * @param {jQuery} context Selection we are dealing with\n         *\n         * @param cfg {@link Configuration} object or undefined.\n         */\n        applyRules: function(context, cfg) {\n            var i;\n\n            cfg = cfg || {};\n\n            if (cfg.log) {\n                log(\"Starting evaluation ruleset of \" + this.rules.length + \" rules\");\n            }\n\n            for (i = 0; i < this.rules.length; i++) {\n                this.rules[i].applyRule(context, cfg);\n            }\n        },\n\n        /**\n         * Walk all rules and sub-rules in this ruleset\n         * @param  {Function} callback(rule)\n         *\n         * @return {Array} Rules as depth-first searched\n         */\n        walk: function() {\n\n            var rules = [];\n\n            function descent(rule) {\n\n                rules.push(rule);\n\n                $(rule.children).each(function() {\n                    descent(this);\n                });\n            }\n\n            $(this.rules).each(function() {\n                descent(this);\n            });\n\n            return rules;\n        },\n\n\n        /**\n         * Check that all controllers and controls referred in ruleset exist.\n         *\n         * Throws an Error if any of them are missing.\n         *\n         * @param {jQuery} context jQuery selection of items\n         *\n         * @param  {Configuration} cfg\n         */\n        checkTargets: function(context, cfg) {\n\n            var controls = 0;\n            var rules = this.walk();\n\n            $(rules).each(function() {\n\n                if (context.find(this.controller).length === 0) {\n                    throw new Error(\"Rule's controller does not exist:\" + this.controller);\n                }\n\n                if (this.controls.length === 0) {\n                    throw new Error(\"Rule has no controls:\" + this);\n                }\n\n                $(this.controls).each(function() {\n\n                    if (safeFind(context, this) === 0) {\n                        throw new Error(\"Rule's target control \" + this + \" does not exist in context \" + context.get(0));\n                    }\n\n                    controls++;\n                });\n\n            });\n\n            if (cfg.log) {\n                log(\"Controller check ok, rules count \" + rules.length + \" controls count \" + controls);\n            }\n\n        },\n\n        /**\n         * Make this ruleset effective on the whole page.\n         *\n         * Set event handler on **window.document** to catch all input events\n         * and apply those events to defined rules.\n         *\n         * @param  {Configuration} cfg {@link Configuration} object or undefined\n         *\n         */\n        install: function(cfg) {\n            $.deps.enable($(document.body), this, cfg);\n        }\n\n    });\n\n    /**\n     * jQuery interdependencie plug-in\n     *\n     * @class jQuery.deps\n     *\n     */\n    var deps = {\n\n        /**\n         * Create a new Ruleset instance.\n         *\n         * Example:\n         *\n         *      $(document).ready(function() {\n         *           // Start creating a new ruleset\n         *           var ruleset = $.deps.createRuleset();\n         *\n         *\n         * @return {Ruleset}\n         */\n        createRuleset: function() {\n            return new Ruleset();\n        },\n\n\n        /**\n         * Enable ruleset on a specific jQuery selection.\n         *\n         * Checks the existince of all ruleset controllers and controls\n         * by default (see config).\n         *\n         * See possible IE event bubbling problems: http://stackoverflow.com/q/265074/315168\n         *\n         * @param  {Object} selection jQuery selection in where we monitor all change events. All controls and controllers must exist within this selection.\n         * @param  {Ruleset} ruleset\n         * @param  {Configuration} cfg\n         */\n        enable: function(selection, ruleset, cfg) {\n\n            cfg = cfg || {};\n\n            if (cfg.checkTargets || cfg.checkTargets === undefined) {\n                ruleset.checkTargets(selection, cfg);\n            }\n\n            var self = this;\n\n            if (cfg.log) {\n                log(\"Enabling dependency change monitoring on \" + selection.get(0));\n            }\n\n            // Namespace our handler to avoid conflicts\n            //\n            var handler = function() { ruleset.applyRules(selection, cfg); };\n            var val = selection.on ? selection.on(\"change.deps\", null, null, handler) : selection.live(\"change.deps\", handler);\n\n            ruleset.applyRules(selection, cfg);\n\n            return val;\n        }\n    };\n\n    $.deps = deps;\n\n})(jQuery);\n"]}